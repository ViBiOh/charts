---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "app.fullname" . }}
  labels: {{- include "app.labels" . | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels: {{- include "app.selectorLabels" . | nindent 6 }}

  {{- if .Values.strategy }}
  strategy: {{- toYaml .Values.strategy | nindent 4 }}
  {{- end }}

  template:
    metadata:
      annotations:
      {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.config }}
        checksum/config: {{ toYaml . | sha256sum }}
      {{- end }}
      {{- with .Values.secrets }}
        checksum/secrets: {{ toYaml . | sha256sum }}
      {{- end }}
      labels:
        prometheus.io/scrape: "true"
        prometheus.io/scheme: http
        prometheus.io/port: {{ .Values.prometheus.port | quote }}
        prometheus.io/path: {{ .Values.prometheus.path | quote }}
        {{- include "app.selectorLabels" . | nindent 8 }}

    spec:
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: {{ include "app.fullname" . }}
        - name: databases
          configMap:
            name: {{ include "app.fullname" . }}-init


      {{- with .Values.affinity }}
      affinity: {{- toYaml . | nindent 8 }}
      {{- end }}

      {{- with .Values.image.pullSecretNames }}
      imagePullSecrets:
        {{- range . }}
        - name: {{ . }}
        {{- end }}
      {{- end }}

      automountServiceAccountToken: false

      securityContext:
        seccompProfile:
          type: RuntimeDefault

      containers:
        - name: {{ include "app.fullname" . }}
          image: "{{ .Values.image.repository }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}

          {{- if or .Values.config .Values.secrets }}
          envFrom:
          {{- if .Values.config }}
            - configMapRef:
                name: {{ include "app.fullname" . }}
          {{- end }}
          {{- if .Values.secrets }}
            - secretRef:
                name: {{ include "app.fullname" . }}
          {{- end }}
          {{- end }}

          volumeMounts:
            - name: data
              mountPath: /var/lib/postgresql/data
            - name: databases
              mountPath: /docker-entrypoint-initdb.d
              readOnly: true

          ports:
            - name: postgres
              containerPort: {{ .Values.port }}
              protocol: TCP

          livenessProbe:
            tcpSocket:
              port: {{ .Values.port }}
          readinessProbe:
            tcpSocket:
              port: {{ .Values.port }}

          {{- with .Values.resources }}
          resources: {{- toYaml . | nindent 12 }}
          {{- end }}

          securityContext:
            runAsGroup: {{ .Values.user }}
            runAsUser: {{ .Values.user }}
            runAsNonRoot: true
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL

        - name: exporter
          image: quay.io/prometheuscommunity/postgres-exporter
          imagePullPolicy: {{ .Values.image.pullPolicy }}

          args:
            - --auto-discover-databases
            - --log.level
            - warn
            - --log.format
            - json

          {{- if or .Values.config .Values.secrets }}
          envFrom:
          {{- if .Values.config }}
            - configMapRef:
                name: {{ include "app.fullname" . }}
          {{- end }}
          {{- if .Values.secrets }}
            - secretRef:
                name: {{ include "app.fullname" . }}
          {{- end }}
          {{- end }}

          env:
            - name: PG_EXPORTER_WEB_LISTEN_ADDRESS
              value: ":{{ .Values.prometheus.port }}"
            - name: DATA_SOURCE_NAME
              value: postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@127.0.0.1:{{ .Values.port }}/$(POSTGRES_DB)?sslmode=disable

          ports:
            - name: prometheus
              containerPort: {{ .Values.prometheus.port }}
              protocol: TCP

          livenessProbe:
            tcpSocket:
              port: {{ .Values.prometheus.port }}
          readinessProbe:
            tcpSocket:
              port: {{ .Values.prometheus.port }}

          resources:
            limits:
              memory: 32Mi
            requests:
              cpu: 100m
              memory: 32Mi

          securityContext:
            runAsGroup: 65534
            runAsUser: 65534
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            capabilities:
              drop:
                - ALL
