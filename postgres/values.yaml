---
# image is the configuration of image management
image:
  repository: postgres:14-alpine
  pullPolicy: Always
  pullSecretNames:
    - dockerhub

# podAnnotations placed on the pod
podAnnotations: {}

# config map created and passed to the pod as a ref
config:
  POSTGRES_USER: app
  POSTGRES_DB: app
  PGDATA: /var/lib/postgresql/data/pgdata

# port used by postgres
port: 5432

# user that run container
user: 70

# persistentVolume for storing databases datas
persistentvolume:
  accessModes:
    - ReadWriteOnce
  storage: 1Gi
  # storageClassName: local-path

# secrets map, in the form of a Sealed Secrets, created and passed to the pod as a ref
secrets:
  POSTGRES_PASSWORD: changeme

# strategy defines the rollout strategy for deployment
strategy:
  type: Recreate

# affinity for the deployment
affinity: {}

# resources requests and limits for defining the QoS
resources:
  limits:
    memory: 128Mi
  requests:
    cpu: 100m
    memory: 64Mi

# service configuration for the service
service:
  type: ClusterIP
  port: 80

# pgBouncer configuration for the connection pooling, not ready for ARM
pgBouncer:
  enabled: false
  version: 1.15.0
  port: 6543

# backup configure cronjob of backup
backup:
  enabled: true
  restartPolicy: Never
  concurrencyPolicy: Forbid
  schedule: "0 4 * * *"

  successfulJobsHistoryLimit: 2
  failedJobsHistoryLimit: 2
  backoffLimit: 3

  extraArgs: --data-only

  # uploadCommand is what's called after pg_dump is success, it's appended with the backup filename without space
  uploadCommand: 'apk --update add curl && curl "${FIBR_BACKUP_URL}" -H "Accept: text/plain" --fail-with-body --user "fibr:${FIBR_BACKUP_PASSWORD}" --form method=POST --form file=@'
